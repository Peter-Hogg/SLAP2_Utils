function [startTime, sType] = SingleBar(win, angle, speed, gratingsize, internalRotation, daq)
% Display an animated grating, using the new Screen('DrawTexture') command.
% This demo demonstrates fast drawing of such a grating via use of procedural
% texture mapping. It only works on hardware with support for the GLSL
% shading language, vertex- and fragmentshaders. The demo ends if you press
% any key on the keyboard.
%
% Optional Parameters:
% 'angle' = Rotation angle of grating in degrees.
% 'internalRotation' = Shall the rectangular image patch be rotated
% (default), or the grating within the rectangular patch?
% gratingsize = Size of 2D grating patch in pixels.
% freq = Frequency of sine grating in cycles per pixel.
% cyclespersecond = Drift speed in cycles per second.


% Make sure this is running on OpenGL Psychtoolbox:
AssertOpenGL;
screenid = max(Screen('Screens'));
white = WhiteIndex(screenid);
black = BlackIndex(screenid);
% Initial stimulus parameters for the grating patch:

if nargin < 4 || isempty(internalRotation)
    internalRotation = 0;
end

if internalRotation
    rotateMode = kPsychUseTextureMatrixForRotation;
else
    rotateMode = [];
end

if nargin < 3 || isempty(gratingsize)
    gratingsize = 1200;
end

% res is the total size of the patch in x- and y- direction, i.e., the
% width and height of the mathematical support:

if nargin < 2 || isempty(speed)
    % Frequency of the grating in cycles per pixel: Here 0.01 cycles per pixel:
    freq = 1/360;
end

if nargin < 1  || isempty(angle)
    % Tilt angle of the grating:
    angle = 0;
end

% Amplitude of the grating in units of absolute display intensity range: A
% setting of 0.5 means that the grating will extend over a range from -0.5
% up to 0.5, i.e., it will cover a total range of 1.0 == 100% of the total
% displayable range. As we select a background color and offset for the
% grating of 0.5 (== 50% nominal intensity == a nice neutral gray), this
% will extend the sinewaves values from 0 = total black in the minima of
% the sine wave up to 1 = maximum white in the maxima. Amplitudes of more
% than 0.5 don't make sense, as parts of the grating would lie outside the
% displayable range for your computers displays:
amplitude = 0.5;


% Make sure the GLSL shading language is supported:
AssertGLSL;


windowRect = [0,0,1920,1080];



[xCenter, yCenter] = RectCenter(windowRect);




% Set parameters for the moving bar
barWidth = gratingsize;
barHeight = 100;
barColor = [255 255 255];  % Red color
barSpeed = speed;  % Speed of the moving bar in pixels per frame
angleDegrees = angle + 90;  % Angle of movement (in degrees)
barRotation = angle;  % Angle to rotate the bar


% Calculate movement increments (x and y) based on the movement angle
angleRadians = deg2rad(angleDegrees);
deltaX = cos(angleRadians) * barSpeed;
deltaY = sin(angleRadians) * barSpeed;





if deltaX > 0
    initialX = -barWidth;
else
    initialX = windowRect(3);
end
if deltaY > 0
    initialY = -barHeight;
else
    initialY = windowRect(4);
end



% Calculate initial position of the bar
barStartX = xCenter - barWidth / 2;
barStartY = yCenter - barHeight / 2;
barRect = [0 0 barWidth barHeight];
barPosition = CenterRectOnPointd(barRect, barStartX, barStartY);

% Draw and rotate the bar to the specified angle
rotatedBarTexture = Screen('MakeTexture', win, barColor);
Screen('DrawTexture', win, rotatedBarTexture, [], barPosition, barRotation);




startTime = datetime;
endTime = (datetime - startTime);
write(daq, 3);
pause(.001);
write(daq, 0);
% Run the animation until the bar goes off the screen
while barPosition(1) >= -barWidth && barPosition(1) <= windowRect(3) && barPosition(2) >= -barHeight && barPosition(2) <= windowRect(4)
    % Update the bar's position based on the movement angle
    barPosition(1) = barPosition(1) + deltaX;
    barPosition(3) = barPosition(3) + deltaX;
    barPosition(2) = barPosition(2) + deltaY;
    barPosition(4) = barPosition(4) + deltaY;

    % Clear the window
    Screen('FillRect', win, black);

    % Draw and rotate the bar at its new position
    Screen('DrawTexture', win, rotatedBarTexture, [], barPosition, barRotation);

    % Flip the screen
    Screen('Flip', win);
end
write(daq, 3);
pause(.001);
write(daq, 0);  



sType = 'GenSingleBar';





end


